#!/usr/bin/env python

import os, subprocess

class VendorCreator:

    def __init__(self):
        self.cm_tree = os.path.dirname(os.path.realpath(__file__))
        self.cm_tree, self.device = os.path.split(self.cm_tree)
        self.cm_tree, self.manufacturer = os.path.split(self.cm_tree)
        self.cm_tree = os.path.dirname(self.cm_tree)
        self.device_tree = os.path.join('device', self.manufacturer, self.device)
        self.vendor_tree = os.path.join('vendor', self.manufacturer, self.device)
        self.prop_dir = os.path.join(self.vendor_tree, 'props')

    def blob_write(self, in_path, out_path):
        self.blobs_mkfile.write('    ')
        self.blobs_mkfile.write(os.path.join(self.prop_dir, in_path))
        self.blobs_mkfile.write(':')
        self.blobs_mkfile.write(out_path)
        self.blobs_mkfile.write(' \\\n')

    def add_prop(self, *args):
        cmd = ['adb', 'pull']
        if not args[0]:
            src = args[1]
        else:
            src = args[0]
        cmd.append('/'+src)
        cmd.append(os.path.join(self.cm_tree, self.prop_dir, src))
        out_dir = os.path.dirname(cmd[-1])
        if not os.path.isdir(out_dir):
            os.makedirs(out_dir)
        print(src)
        subprocess.call(cmd)
        if len(args) == 1:
            self.blob_write(src, src)
        else:
            for arg in args[1:]:
                self.blob_write(src, arg)

    def __call__(self, filename):
        full_vendor = os.path.join(self.cm_tree, self.vendor_tree)
        if not hasattr(self, 'blobs_mkfile'):
            self.blobs_mkfile = open(os.path.join(full_vendor, self.device+'_blobs.mk'), 'w')
            self.blobs_mkfile.write('PRODUCT_COPY_FILES += \\\n')
        filename = os.path.join(self.cm_tree, self.device_tree, filename)
        for s in open(filename, 'r'):
            s = s.strip()
            if s and not s.startswith('#'):
                self.add_prop(*s.split(':'))
        if not hasattr(self, 'base_mkfile'):
            self.base_mkfile = open(os.path.join(full_vendor, self.device+'_base.mk'), 'w')
            self.base_mkfile.write('$(call inherit-product, ')
            self.base_mkfile.write(self.blobs_mkfile.name[len(self.cm_tree)+1:])
            self.base_mkfile.write(')')

if __name__ == '__main__':
    VendorCreator()('proprietary_files.txt')
